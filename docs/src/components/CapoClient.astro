---
import { Icon } from '@astrojs/starlight/components';
import { Tabs, TabItem } from '@astrojs/starlight/components';
---

<script>
  import { run } from '../lib/capo.js';
  import { VirtualConsole } from '../lib/VirtualConsole.js';

  document.addEventListener('DOMContentLoaded', init);

  let markup, input, output, reminder, virtualConsole, url;

  function init() {
    virtualConsole = new VirtualConsole(output);
    input = document.querySelector('#input');
    output = document.querySelector('#output');
    reminder = document.querySelector('#reminder');
    markup = document.querySelector('#markup');
    url = document.querySelector('#url');
    
    initUrl();
    virtualConsole = new VirtualConsole(output);

    input.addEventListener('submit', e => {
      handleSubmit();
      e.preventDefault();
      return false;
    });
  }

  async function initUrl() {
    const thisUrl = new URL(location.href);
    const urlParam = thisUrl.searchParams.get('url');
    if (!urlParam) {
      return;
    }
    url.value = urlParam;
    document.querySelector('a[role=tab]:not([aria-selected])').click();
    try {
      await handleSubmit();
    } catch (e) {
      console.error('Capo error', e);
    }
  }

  function setUrl(urlParam) {
    const thisUrl = new URL(location.href);
    thisUrl.searchParams.set('url', urlParam);
    history.replaceState(null, null, thisUrl);
  }

  async function handleSubmit() {
    reminder.classList.remove('highlight');
    const html = await getHtml(virtualConsole);
    virtualConsole.clear();
    run(html, virtualConsole);
    reminder.classList.add('highlight');
  }

  async function getHtml() {
    let html;
    const selectedTab = document.querySelector('a[role=tab][aria-selected=true]').innerText;

    if (selectedTab === 'URL') {
      if (!url.value || !url.validity.valid) {
        throw new Error(`Invalid URL "${url.value}"`);
      }
      if (url.value != url.getAttribute('placeholder')) {
        setUrl(url.value);
      }
      html = await getStaticHTML(url.value);
    } else {
      html = markup.value;
    }

    if (!html) {
      throw new Error('Unable to run. Invalid HTML.');
    }

    return html;
  }

  async function getStaticHTML(url) {
    const proxy = new URL('https://capo.rviscomi.workers.dev/');
    proxy.searchParams.set('url', url);
    const response = await fetch(proxy);
    if (response.status == 502) {
      throw new Error(`502 Gateway Error. The URL ${url} cannot be fetched. (Possibly too many redirects)`);
    } else if (!response.ok) {
      throw new Error('Unknown error fetching the URL. Please file an issue: https://github.com/rviscomi/capo.js/issues/');
    }
    return await response.text();
  }
</script>

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  textarea {
    display: block;
    width: 100%;
    height: 200px;
    font-family: monospace !important;
  }

  button {
    cursor: pointer;
    align-self: center;
    display: inline-block;
    border: none;
    border-radius: 999rem;
    margin: 0 !important;
    padding: 1rem 1.25rem;
    background-color: var(--sl-color-text-accent);
    color: var(--sl-color-black);
    font-size: var(--sl-text-base);
  }

  button svg {
    display: inline !important;
    vertical-align: middle;
    margin-left: 0.5rem;
  }

  input {
    width: 100%;
  }

  input:invalid {
    border-color: #9e0142;
  }

  #output .warn {
    background-color: rgba(255, 159, 67, 0.1);
    color: orange;
  }

  #output .error {
    background-color: rgba(255, 99, 132, 0.1);
    color: red;
  }

  #reminder {
    transition: background-color 0.5s;
  }

  #reminder.highlight {
    animation: highlight 1s ease-in-out;
  }

  @keyframes highlight {
    0% {
      background-color: transparent;
    }
    10% {
      background-color: rgba(255, 255, 0, 0.4);
    }
    end {
      background-color: transparent;
    }
  }
</style>

<p>To see capo.js in action, enter HTML or a URL in the form field below and click <strong>Run</strong>.</p>

<p><strong id="reminder">Results are logged to the DevTools console.</strong></p>

<form id="input">
  <Tabs>
    <TabItem label="HTML">
      <textarea id="markup" placeholder="Enter HTML">
<title>test</title>
<meta charset="utf-8">
<meta name="description" content="Try capo.js">
<style></style>
<meta http-equiv="origin-trial" content="AuNyVoVDAnYrBa2cL89WmgDSi1Os1UAt4SmcY1vXSJKDlIlBNfD4SEpIfg3LNDexEWv6N2kHnJ17MT4cVmRhQgIAAABueyJvcmlnaW4iOiJodHRwczovL3J2aXNjb21pLmdpdGh1Yi5pbzo0NDMiLCJmZWF0dXJlIjoiQmFja0ZvcndhcmRDYWNoZU5vdFJlc3RvcmVkUmVhc29ucyIsImV4cGlyeSI6MTY5MTUzOTE5OX0=">
<script></script>
      </textarea>
    </TabItem>
    <TabItem label="URL">
      <input id="url" type="url" value="https://www.example.com/" placeholder="https://www.example.com/">
    </TabItem>
  </Tabs>
  <button>Run <Icon name="rocket" color="inherit" size="1.5rem" /></button>
</form>

<div id="output"></div>
